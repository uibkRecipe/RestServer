package persistent.ressource;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

import persistent.classes.Category;
import persistent.classes.Ort;
import persistent.classes.Rezept;
import persistent.classes.User;
import persistent.classes.Zutaten;
import persistent.hibernateManager.FriendManager;
import persistent.hibernateManager.OrtManager;
import persistent.hibernateManager.RezeptManager;
import persistent.hibernateManager.UserManager;
/**
 * Fassade for hibernate
 * @author mirko
 *
 */

//Will map the resource to the URL
@Path("/user")
public class HibernateManager {
	
	
	 // Allows to insert contextual objects into the class, 
	  // e.g. ServletContext, Request, Response, UriInfo
	  @Context
	  UriInfo uriInfo;
	  @Context
	  Request request;

	Session session;
	UserManager userManager;
	OrtManager ortManager;
	FriendManager friendManager;
	RezeptManager rezeptManager;
	
	/**
	 * Constructor return a new HibernateManager
	 */
	public HibernateManager() {
		Configuration configuration = new Configuration();
		configuration.configure("hibernate.cfg.xml");
		StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder()
				.applySettings(configuration.getProperties());
		SessionFactory sessionFactory = configuration.buildSessionFactory(ssrb
				.build());
		session = sessionFactory.openSession();
		userManager = new UserManager(session);
		ortManager = new OrtManager(session);
	}

	/**
	 * Close the session
	 */
	public void closeSession() {
		session.close();
	}
	
	/****************************************************************
	 * 
	 *  User Functionalities
	 *  
	 ****************************************************************/
	
	@GET
	@Path("login/{username}/{password}")
	@Produces(MediaType.APPLICATION_JSON)
	public boolean logIn(@PathParam("username") String username, @PathParam("password") String password){
		return userManager.logIn(username, password);
	}

//	 @GET
//	 @Produces(MediaType.TEXT_XML)
//	 public User getTodosBrowser() {
//		 User simon = new User();
//		  simon.setUser_name("simon123");
//		  simon.setPassword("blub");
//		  simon.setEmail("simon.targa@blub.com");
//		  return simon;
//	  }
	
	
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addUser(User user){
		if(userManager.addUser(user)){
//		User blub = new User("simon1234", "123213123", "adkfljads@");
		  return Response.status(200).entity(true).build();
		}
		return Response.status(200).entity(false).build();
//		else
//			return Response.status(200).entity(null).build();
	}
	
	/*****************************************************************
	 * 
	 * Ort Functionalities
	 * 
	 *****************************************************************/
	/**
	 * return value was boolean, I changed it to Response!
	 * (I am not sure about that!)
	 */
	@POST
	@Path("/ort/{ort}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addOrt(@PathParam("ort") Ort ort){
		if(ortManager.addOrt(ort)){
//			Ort newOrt = new Ort("Ortname", 6020, "Land");
			return Response.status(200).entity(true).build();
		}
		return Response.status(200).entity(false).build();
	}
	
	@GET
	@Path("/ort/{ortId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Ort findOrtById(@PathParam("ortId") int ortId){
		return ortManager.findOrtById(ortId);
	}
	
	@GET
	@Path("/ort/{ortName}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Ort> findOrtByName(@PathParam("ortName") String ortName) {
		return ortManager.findOrtByName(ortName);
	}
	/******************************************************************
	 * 
	 * 
	 * Friends functionalities
	 * 
	 * 
	 ******************************************************************/ 
	@GET
	@Path("/friend/{username}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<String> getFriend(@PathParam("username") String username){
		return friendManager.getFriend(username);
	}
	
	/**
	 * return value was boolean, I changed it to Response!
	 * (I am not sure about that!)
	 * 
	 * Is it better that we return in the FriendManager class at function
	 * addFriend a type Friend instead of the type boolean. So we can 
	 * return here the Response.
	 */
	@POST
	@Path("/friend/{username1}/{username2}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addFriend(@PathParam("username1")String username1, @PathParam("username2") String username2){
		if(friendManager.addFriend(username1, username2)) {
//			Friend newFriend = new Friend("freund1", "freund2");
			return Response.status(200).entity(true).build();
		}
		return Response.status(200).entity(false).build();
	}

	@DELETE
	@Path("/friend")
	@Consumes(MediaType.APPLICATION_JSON)
	public boolean deleteFriend(String username1, String username2){
		return friendManager.deleteFriend(username1, username2);
	}
	
	/****************************************************************
	 *  
	 * Rezept functionalities
	 *
	 ****************************************************************/
	@POST
	@Path("recipe")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addRezept(Rezept r){
		if(rezeptManager.addRezept(r)){
//			List<Zutaten> zutaten = null;
//			Category category = null;
//			Rezept newRezept = new Rezept("Autor", "Name", "Zubereitung", zutaten, category);
			return Response.status(200).entity(true).build();
		}
		return Response.status(200).entity(false).build();
	}
	

}
